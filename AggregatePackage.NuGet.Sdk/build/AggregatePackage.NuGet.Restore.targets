<Project>
  <!-- Patched Restore Targets -->

  <Target Name="_GetRestoreProjectStyle"
    Returns="$(RestoreProjectStyle);$(PackageReferenceCompatibleProjectStyle)">
    <PropertyGroup>
      <RestoreProjectStyle>PackageReference</RestoreProjectStyle>
      <PackageReferenceCompatibleProjectStyle>true</PackageReferenceCompatibleProjectStyle>
    </PropertyGroup>
  </Target>

  <!-- Add copy of AssignProjectConfiguration target so targets that have BeforeTargets="AssignProjectConfiguration" don't run. -->
  <Target
    Name="AssignProjectConfigurationDirectProjectReferencesOnly"
    Condition="'$(CurrentSolutionConfigurationContents)' != '' or '@(ProjectReference)'!=''">

    <PropertyGroup>
      <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">true</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
      <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildingSolutionFile)' == 'true')">true</ShouldUnsetParentConfigurationAndPlatform>
      <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == ''">false</ShouldUnsetParentConfigurationAndPlatform>

      <!-- Inside VS, we do not need to add synthetic references, as VS already organizes the build per any solution-level dependencies; we only do this on the command line-->
      <AddSyntheticProjectReferencesForSolutionDependencies Condition="'$(AddSyntheticProjectReferencesForSolutionDependencies)' == '' and '$(BuildingInsideVisualStudio)' != 'true'">true</AddSyntheticProjectReferencesForSolutionDependencies>
    </PropertyGroup>

    <!-- Assign a project configuration to each project reference if we're building a solution file. -->
    <AssignProjectConfiguration
        ProjectReferences="@(ProjectReference)"
        CurrentProject="$(MSBuildProjectFullPath)"
        CurrentProjectConfiguration="$(Configuration)"
        CurrentProjectPlatform="$(Platform)"
        DefaultToVcxPlatformMapping="$(DefaultToVcxPlatformMapping)"
        VcxToDefaultPlatformMapping="$(VcxToDefaultPlatformMapping)"
        OutputType="$(OutputType)"
        ResolveConfigurationPlatformUsingMappings="false"
        SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)"
        AddSyntheticProjectReferencesForSolutionDependencies="$(AddSyntheticProjectReferencesForSolutionDependencies)"
        OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration = "$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)"
        ShouldUnsetParentConfigurationAndPlatform = "$(ShouldUnsetParentConfigurationAndPlatform)" >
      <Output TaskParameter="AssignedProjects" ItemName="ProjectReferenceWithConfiguration"/>
      <Output TaskParameter="UnassignedProjects" ItemName="ProjectReferenceWithConfiguration"/>
    </AssignProjectConfiguration>

    <ItemGroup>
      <ProjectReferenceWithConfiguration>
        <BuildReference Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == ''">true</BuildReference>
        <ReferenceOutputAssembly Condition="'%(ProjectReferenceWithConfiguration.ReferenceOutputAssembly)' == ''">true</ReferenceOutputAssembly>
      </ProjectReferenceWithConfiguration>
    </ItemGroup>
  </Target>

  <!-- Collect package references from referenced projects. -->
  <Target Name="CollectPackageReferences"
    DependsOnTargets="$(CollectPackageReferencesDependsOn)"
    Returns="@(PackageReference)">
    <MSBuild
      Projects="@(_MSBuildProjectReferenceExistent)"
      Targets="CollectPackageReferences"
      Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);
                  %(_MSBuildProjectReferenceExistent.SetPlatform);
                  %(_MSBuildProjectReferenceExistent.SetTargetFramework);"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)"
      Condition="'%(_MSBuildProjectReferenceExistent.EmbedReference)' != 'false'">
      <Output TaskParameter="TargetOutputs" ItemName="UnfliteredPackageReference" />
    </MSBuild>

    <RemoveDuplicates Inputs="@(UnfliteredPackageReference)">
      <Output TaskParameter="Filtered" ItemName="PackageReference" />
    </RemoveDuplicates>
      
  </Target>

  <!-- Override target to not restore embedded project references. -->
  <Target Name="_GenerateProjectRestoreGraphPerFramework"
    DependsOnTargets="_GetRestoreProjectStyle;CollectPackageReferences"
    Returns="@(_RestoreGraphEntry)">

    <GetRestoreProjectReferencesTask
      ProjectUniqueName="$(MSBuildProjectFullPath)"
      ProjectReferences="@(ProjectReference)"
      TargetFrameworks="$(TargetFramework)"
      ParentProjectPath="$(MSBuildProjectFullPath)"
      Condition="'%(ProjectReference.EmbedReference)' == 'false'">
      <Output
        TaskParameter="RestoreGraphItems"
        ItemName="_RestoreGraphEntry" />
    </GetRestoreProjectReferencesTask>

    <GetRestorePackageReferencesTask
      ProjectUniqueName="$(MSBuildProjectFullPath)"
      PackageReferences="@(PackageReference)"
      TargetFrameworks="$(TargetFramework)">
      <Output
        TaskParameter="RestoreGraphItems"
        ItemName="_RestoreGraphEntry" />
    </GetRestorePackageReferencesTask>

    <PropertyGroup>
      <_CombinedFallbacks>$(PackageTargetFallback);$(AssetTargetFallback)</_CombinedFallbacks>
    </PropertyGroup>

    <!-- Write out target framework information -->
    <ItemGroup Condition="  '$(PackageReferenceCompatibleProjectStyle)' == 'true' AND '$(_CombinedFallbacks)' != '' ">
      <_RestoreGraphEntry Include="$([System.Guid]::NewGuid())">
        <Type>TargetFrameworkInformation</Type>
        <ProjectUniqueName>$(MSBuildProjectFullPath)</ProjectUniqueName>
        <PackageTargetFallback>$(PackageTargetFallback)</PackageTargetFallback>
        <AssetTargetFallback>$(AssetTargetFallback)</AssetTargetFallback>
        <TargetFramework>$(TargetFramework)</TargetFramework>
      </_RestoreGraphEntry>
    </ItemGroup>
  </Target>
</Project>